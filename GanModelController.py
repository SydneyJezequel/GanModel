from fastapi import FastAPI
from GanService import generate_gan_pictures
from pydantic import BaseModel






# ****************************************************************************************************************************** #
# ******************************************** Commande pour démarrer l'application ******************************************** #
# ****************************************************************************************************************************** #

# uvicorn main:app --reload --workers 1 --host 0.0.0.0 --port 8008
# uvicorn GanModelController:app --reload --workers 1 --host 0.0.0.0 --port 8008






# ****************************************************************************************************************************** #
# **************************************************** Chargement de l'Api ***************************************************** #
# ****************************************************************************************************************************** #

app = FastAPI()






# ****************************************************************************************************************************** #
# ******************************************************** Api de test ********************************************************* #
# ****************************************************************************************************************************** #

@app.get("/ping")
async def pong():
    return {"ping": "pong!"}






#****************************************************************************************************************************** #
# ******************************************************** Exécution du modèle GAN ********************************************************* #
# ****************************************************************************************************************************** #


@app.get("/generate-faces")
async def generate_gan_pictures_controller():
    generate_gan_pictures()






#****************************************************************************************************************************** #
# ******************************************************** Entrainement du modèle GAN ********************************************************* #
# ****************************************************************************************************************************** #


# Classe des Hyperamètres :
class Hyperparameters(BaseModel):
    nb_epochs : int
    batch_size : int
    lr : float
    z_dim : int
    device : str
    show_step : int
    save_step : int


# Controller qui lance l'entrainement du modèle Gan :
@app.post("/train-gan-model", status_code=200)
async def train_gan_model(payload: Hyperparameters):
    print(payload.nb_epochs)
    print(payload.batch_size)
    print(payload.lr)
    print(payload.z_dim)
    print(payload.device)
    print(payload.show_step)
    print(payload.save_step)
    return 'Hello world'
    # A compléter :






